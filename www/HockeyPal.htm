<!DOCTYPE HTML>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="x-ua-compatible" content="ie=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="default" />
	<meta name="apple-touch-fullscreen" content="yes" />
	<title>Hockey Pal</title>
	<style type="text/css">
		/* Global Styles */
		body, div, table
		{
		    background-color: transparent;
		    font-size: 0.9rem;
		    font-family: tahoma, verdana, arial;
		    color: navy;
		}
		
		hr
		{
		    margin-top: 3px;
		    margin-bottom: 3px;
		}

		div.Header 
		{
		    margin-bottom: 5px;
		}

		div.Header hr
		{
		    margin-top: 3px;
		    margin-bottom: 3px;
		}

		div.Header div.Title
		{
		    font-weight: bold;
		    font-size: 0.9rem;
		    display: inline-block;
		    color: navy;
		}
		
		div.Header div.Menu
		{
		    display: inline-block;
		}

		div.Header div.Menu a
		{
		    background-color: navy;
		    color: white;
		    display: inline-block;
		    padding: 5px 5px;
		    text-decoration: none;
		    border-radius: 3px;
		    border: solid navy 1px;
		    margin-right: 10px;
		}

		div.Header div.Menu a:hover
		{
		    background-color: white;
		    color: navy;
		}

		div.Body 
		{
		    display: block;
		    width: 100%;
		}
		
		input[type=button] 
		{
		    min-height: 30px;
		}
		
		input[type=text]
		{
		    font-size: 0.9rem;
		    padding: 5px 10px;
		}
		
		input[type=radio]
		{
		    height: 20px;
		    width: 20px;
		}
		
        #divDropdownMenu {
            display: block;
            min-width: 100px;
            background-color: navy;
            color: white;
            position: absolute;
            top: 40px;
            min-height: 50px;
            right: 20px;
            border-radius: 5px;
        }

        #divDropdownMenu a {
            display: block;
            color: white;
            text-decoration: none;
            padding: 5px;
            border: solid 1px white;
            border-radius: 5px;
            margin: 5px 3px;
        }

        #divDropdownMenu a:hover {
            color: navy;
            background-color: white;
        }

	</style>
	<style type="text/css">

		/* Lineup Styles */

		#divEntry 
		{
		    display: block;
		    width: 100%;
		    padding: 10px 15px;
		}
		
		#divLineup 
		{
		    display: block;
		    width: 100%;
		}
		
		#divLineup div.PlayerEntry
		{
		    display: block;
		    padding: 5px 5px;
		    border: solid navy 1px;
		}

		#divLineup div.PlayerEntry:hover
		{
		    background-color: navy;
		    color: white;
		}
		
		div.PlayerDisplayEntry
		{
		    display: block;
		    margin-top: 5px;
		    margin-bottom: 5px;
		}

		div.PlayerDisplayEntry input[type=button]
		{
		    padding-left: 25px;
		    padding-right: 25px;
		    margin-right: 25px;
		}

		div.PlayerDisplayPrompt
		{
		    display: block;
		    font-style: italic;
		}
		
		div.PlayerDisplayValue
		{
		    display: block;
		    margin-left: 10px;
		    vertical-align: top;
		}
		
		div.PlayerPositionType 
		{
		    display: block;
		}
		
		div.PlayerPositionType label, div.PlayerPositionType input[type=radio]
		{
		    font-size: 1rem;
		    vertical-align: middle;
		}

		div.PlayerPositionType label
		{
		    padding-left: 10px;
		}

	</style>
	<style type="text/css">
		/* Game Styles */

		#divOnIce 
		{
		    display: block;
		    min-height: 25px;
		    font-size: 1.2rem;
		    font-weight: bold;
		}
		
		#divRoster
		{
		    display: block;
		}
		
		#divRoster input[type=button]
		{
		    height: 30px;
		    margin: 5px;
		    min-width: 30px;
		    border-radius: 3px;
		    padding-left: 5px;
		    padding-right: 5px;
		    text-align: center;
		}

		#divRoster input[type=button].OnIce
		{
		    background-color: yellow;
		    font-weight: bold;
		}
		
		div.PlayerRoster 
		{
		    display: block;
		    border: solid black 1px;
		    margin: 5px;
		    min-height: 25px;
		    border-radius: 3px;
		}
		
	</style>
	<style type="text/css">
		/* Details */
		
		#divDetailsContainer table.ScoreEvents 
		{
		    margin-top: 10px;
		    margin-bottom: 20px;
		    margin-left: 5px;
		    border-collapse: collapse;
		}

		table.ScoreEvents td, table.ScoreEvents th
		{
		    padding: 2px 5px;
		    border: solid navy 1px;
		    text-align: center;
		}
	</style>
	<script src="jquery-3.1.1.min.js" type="text/javascript"></script>
	<script type="text/javascript">
		// objects/classes

		function PlayerProfile(playerNumber, playerName, playerPosition) {
			this.PlayerNumber = null;
			this.PlayerName = null;
			this.PlayerPosition = null;

			this.toString = function () {
				return ( this.PlayerNumber || "" ) + "!" + ( this.PlayerName || "" ) + "!" + ( this.PlayerPosition || "" );
			};

			this.initialize = function (playerNumber, playerName, playerPosition) {
				this.PlayerNumber = null;
				this.PlayerName = null;
				this.PlayerPosition = null;

				if (playerNumber == null)
					throw new Error("Cannot initialize PlayerProfile - missing Player Number");

				if (playerName == null || playerName == "")
					throw new Error("Cannot initialize PlayerProfile - missing Player Name");

				if (playerPosition != null) {
					if (playerPosition != "O" && playerPosition != "D" && playerPosition != "")
						throw new Error("Cannot initialize PlayerProfile - invalid Player Position");
				}

				if (isNaN(parseInt(playerNumber)))
					throw new Error("Cannot initialize PlayerProfile - invalid Player Number (not an integer)");

				this.PlayerNumber = parseInt(playerNumber);
				this.PlayerName = playerName;
				this.PlayerPosition = playerPosition;

			    return this;
			};

			this.inflate = function (serializedPlayerProfile) {
				this.PlayerNumber = null;
				this.PlayerName = null;
				this.PlayerPosition = null;

				if (serializedPlayerProfile == null || serializedPlayerProfile == "")
					return;

				var playerProfileParts = serializedPlayerProfile.split("!");

				if (playerProfileParts.length != 3)
					throw new Error("Cannot inflate PlayerProfile - invalid serialized data (did not find 3 parts): " + serializedPlayerProfile);

				this.initialize( playerProfileParts[0], playerProfileParts[1], playerProfileParts[2] );

			    return this;
			}

			this.label = function () {
				return this.PlayerNumber + ": " + this.PlayerName + " (" + this.PlayerPosition + ")";
			}

			this.createPlayerDiv = function () {
				var newDiv = $("<div/>").text(this.label()).addClass("PlayerEntry");

				return newDiv;
			};

			this.inflatFromPlayerDiv = function (div) {
			};

			if (playerNumber != null && playerName != null && playerPosition != null)
				this.initialize(playerNumber, playerName, playerPosition);
			else if (playerNumber != null && playerName == null)
				this.inflate(playerNumber);
		}

		function ScoreEvent( plusMinus, arrayPlayerNumbers ) {
		    this.PlusMinus = plusMinus;
		    this.PlayerNumbers = arrayPlayerNumbers;

		    this.toString = function () {
		        return this.PlusMinus.toString() + "!" + this.PlayerNumbers.toString().replace( /,/g, ";" );
		    }

		    this.inflate = function ( serializedScoreEvent ) {
		        this.PlusMinus = 0;
		        this.PlayerNumbers = [];

		        var eventParts = serializedScoreEvent.split( "!" );

		        if ( eventParts.length !== 2 ) {
		            alert( "Failed to deserialize a ScoreEvent" );
		            return this;
		        }

		        var plusMinus = parseInt( eventParts[0] );

		        if ( isNaN( plusMinus ) || ( plusMinus !== -1 && plusMinus !== 1 ) ) {
		            alert( "Failed to deserialize a ScoreEvent - Invalid Plus/Minus" );
		            return this;
		        }

		        if ( $.trim( eventParts[1] ) === "" ) {
		            alert( "Failed to deserialize a ScoreEvent - Empty Players List" );
		            return this;
		        }

		        var playerArray = eventParts[1].split( ";" );

		        this.PlusMinus = plusMinus;
		        this.PlayerNumbers = playerArray;

		        return this;
		    }
		}

		ScoreEvent.ToList = function ( scoreEventsString ) {
		    var eventsArray = scoreEventsString.split( "," );

		    var finalList = [];

		    $(eventsArray).each(function() {
		        var scoreEvent = new ScoreEvent().inflate(this);

		        finalList.push(scoreEvent);
		    });

		    return finalList;
		}

	    function Game(title, optScoreEvents)
	    {
	        this.Title = "";
	        this.ScoreEvents = [];

	        this.initialize = function(gameTitle, scoreEvents)
	        {
	            this.Title = gameTitle;
	            this.ScoreEvents = scoreEvents;

	            return this;
	        };

	        this.inflate = function(serializedGame)
	        {
	            if (serializedGame == null || serializedGame === "")
	                throw new Error("Cannot Create Game - missing serialized data");

	            var majorParts = serializedGame.split( "^" );

	            if (majorParts.length !== 2)
	                throw new Error( "Cannot Create Game - ill-formed serialized data (expecting 2 major parts)" );

	            var arrayScoreEvents = majorParts[1].split("$");

	            this.initialize(majorParts[0], arrayScoreEvents);

	            return this;
	        }

	        this.AddScoreEvent = function(scoreEvent)
	        {
	            this.ScoreEvents.push(scoreEvent);
	        };

	        this.toString = function()
	        {
	            var scoreEventsList = this.ScoreEvents.toString().replace(/,/g, "$");
	            return (this.Title || "") + "^" + (scoreEventsList || "");
	        };

	        this.initialize( title, optScoreEvents );
        }


	</script>
	<script type="text/javascript">

		$(document).ready(function () {

			BuildLineup();

			$("#txtPlayerNumber").change(function () {
				$(this).val($(this).val().replace(/[^0-9]/g, ""));
			});

			$("#divLineup div").click(function () {
				ShowPlayer($(this));
			});

			RefreshRoster();
		});

		function BuildLineup() {

			InitLineup();

			var keyArray = [];

			for (i = 0; localStorage.key(i) != null; i++) {

				if (localStorage.key(i).substr(0, 6) != "player")
					continue;

				var serializedPlayerProfile = localStorage.getItem(localStorage.key(i));
				var playerProfile = new PlayerProfile(serializedPlayerProfile);

				keyArray.push(parseInt(playerProfile.PlayerNumber));
			}

			keyArray.sort(function (a, b) { return a - b; });

			$(keyArray).each(function () {
				var playerNumber = this;
				var infoKey = "player" + playerNumber;
				var serializedPlayer = localStorage.getItem(infoKey);


				var playerProfile = new PlayerProfile(serializedPlayer);
				var objPlayerInfo = playerProfile.createPlayerDiv();

				$("#divLineup").append(objPlayerInfo);
			});
		}

		function InitLineup() {
			var playerNumberList = localStorage.getItem("NumberList");

			if (playerNumberList != null)
				return;

			localStorage.setItem("NumberList", "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,40,41,42,43,44,45,46,47,48,49");

			var playerNumbers = localStorage.NumberList.split(",");

			$(playerNumbers).each(function () {
				var playerNumber = this;
				var infoKey = "player" + playerNumber;

				var playerInfo = localStorage.getItem(infoKey);

				if (playerInfo == null) {
					var playerName = "Player" + playerNumber;

					var playerProfile = new PlayerProfile(playerNumber, playerName, "");

					localStorage.setItem(infoKey, playerProfile.toString());
				}
			});
		}

		function ShowPlayer(divPlayer) {
			var playerInfo = $.trim(divPlayer.text());
			var playerNumber = $.trim(playerInfo.split(":")[0]);

			var infoKey = "player" + playerNumber;

			var serializedPlayer = localStorage.getItem(infoKey);

			if (serializedPlayer == null || serializedPlayer == "") {
				alert("playerInfo not found");
				return;
			}

			if ($("#divEntry").is(":visible") && playerNumber == $("#txtPlayerNumber").val()) {
				$("#divEntry").hide();
				return;
			}

			$("#divEntry").hide();

			var playerProfile = new PlayerProfile(serializedPlayer);

			$("#txtPlayerNumber").val(playerProfile.PlayerNumber);
			$("#txtPlayerName").val(playerProfile.PlayerName);

			$("#rbUnknown").prop("checked", true);

			if (playerProfile.PlayerPosition == "O")
				$("#rbOffense").prop("checked", true);
			else if (playerProfile.PlayerPosition == "D")
				$("#rbDefense").prop("checked", true);

			$("#divEntry").insertAfter(divPlayer);
			$("#txtPlayerNumber").prop("readonly", true);
			$("#divEntry").show();
			$("#txtPlayerName").focus().select();
		}

		function UpdatePlayer() {
			var playerName = $.trim($("#txtPlayerName").val());

			if (playerName === "") {
				alert("Player Name must have a value");
				return;
			}

			var playerNumber = $("#txtPlayerNumber").val();
			var nPlayerNumber = parseInt(playerNumber);
			var playerPosition = $("#rbOffense").prop("checked")
						? "O"
						: (
							$("#rbDefense").prop("checked")
								? "D"
								: ""
						);

			var infoKey = "player" + playerNumber;

			var playerProfile = new PlayerProfile(nPlayerNumber, playerName, playerPosition);

			localStorage.setItem(infoKey, playerProfile.toString());

			var divs = $("div.PlayerEntry")
				.filter(function () {
					return parseInt($.trim($(this).text()).split(":")[0]) >= nPlayerNumber;
				});

			if (divs.length === 0) {
				var objPlayerInfo = playerProfile.createPlayerDiv();
				$("#divLineup").append(objPlayerInfo);

				objPlayerInfo.click(function () {
					ShowPlayer($(this));
				});

				return;
			}

			var div = $(divs[0]);

			if ($.trim(div.text()).split(":")[0] === playerNumber) {
				div.text(playerProfile.label());
				return;
			}

			var newDiv = playerProfile.createPlayerDiv();

			newDiv.click(function () {
				ShowPlayer($(this));
			});

			newDiv.insertBefore(div);
		}

		function CloseEntry() {
			$("#divEntry").prev()[0].scrollIntoView();
			$("#divEntry").hide();
		}

		function AddNewPlayer() {
			$("#divEntry").hide();
			$("#divEntry").insertBefore("#divLineup");
			$("#txtPlayerNumber").prop("readonly", false).focus().val("");
			$("#txtPlayerName").val("");
			$("#rbUnknown").prop("checked", true);
			$("#divEntry").show();
		}

		function DeleteEntry() {
			var playerNumber = $("#txtPlayerNumber").val();
			var nPlayerNumber = parseInt(playerNumber);
			var infoKey = "player" + playerNumber;

			var gamePlayers = localStorage.gamePlayers;

			if (gamePlayers != null && gamePlayers != "") {
				var gamePlayersArray = gamePlayers.split(",");

				if (gamePlayers.indexOf(playerNumber) >= 0) {
					alert("Player cannot be deleted - currently 'On the Ice'");
					return;
				}
			}


			localStorage.removeItem(infoKey);

			var div = $("div.PlayerEntry")
				.filter(function () {
					return parseInt($.trim($(this).text()).split(":")[0]) === nPlayerNumber;
				});

			if (div.length === 1) {
				div.remove();
			}

			$("#divEntry").hide();
		}

	</script>
	<script type="text/javascript">
		// intra-screen navigation

		function NavigateToGame()
		{
		    $("#divDropdownMenu").hide();

		    RefreshRoster();

		    if ($("#divHockeyGame").is(":visible"))
		        return;

		    if ($("#divHockeyLineup").is(":visible"))
		        $("#divHockeyLineup").slideToggle(500);

			if ($("#divDetails").is(":visible"))
				$("#divDetails").slideToggle(500);

		    $("#divTitle").text("Game");

			$("#divHockeyGame").slideToggle(500);
		}

		function NavigateToLineup()
		{
		    $("#divDropdownMenu").hide();

		    if ($("#divHockeyLineup").is(":visible"))
		        return;

		    if ($("#divHockeyGame").is(":visible"))
		        $("#divHockeyGame").slideToggle(500);

		    if ($("#divDetails").is(":visible"))
				$("#divDetails").slideToggle(500);

		    $("#divTitle").text("Lineup");

		    $( "#divHockeyLineup" ).slideToggle( 500 );
		}

		function NavigateToDetails()
		{
		    $("#divDropdownMenu").hide();

		    BuildDetails();

		    if ($("#divDetails").is(":visible"))
		        return;

			if ($("#divHockeyLineup").is(":visible"))
				$("#divHockeyLineup").slideToggle(500);

			if ($("#divHockeyGame").is(":visible"))
				$("#divHockeyGame").slideToggle(500);

		    $("#divTitle").text("Details");

		    $("#divDetails").slideToggle(500);
		}

	</script>
	<script type="text/javascript">

		function ResetGame() {

			if (!confirm("Reset game - will lose all game-time history?"))
				return;

			localStorage.removeItem("gamePlayers");
			localStorage.removeItem("scoreEvents");

			RefreshRoster();
		}


		function RefreshRoster() {
			$("#divRosterOffense").empty();
			$("#divRosterDefense").empty();
			$("#divRosterUnknown").empty();
			$("#divOnIce").empty();

			var keyArray = [];

			for (i = 0; localStorage.key(i) != null; i++) {

				if (localStorage.key(i).substr(0, 6) != "player")
					continue;

				var serializedPlayer = localStorage.getItem(localStorage.key(i));
				var playerProfile = new PlayerProfile(serializedPlayer);

				keyArray.push(parseInt(playerProfile.PlayerNumber));
			}

			keyArray.sort(function (a, b) { return a - b; });

			$(keyArray).each(function () {
				var infoKey = "player" + this;
				var serializedPlayer = localStorage.getItem(infoKey);
				var playerProfile = new PlayerProfile(serializedPlayer);
				var thisPlayer = $("<input type='button' name='btnPlayer' onclick='TogglePlayer(this);'/>").val(playerProfile.PlayerNumber);

				if (playerProfile.PlayerPosition == "O")
					$("#divRosterOffense").append(thisPlayer);
				else if (playerProfile.PlayerPosition == "D")
					$("#divRosterDefense").append(thisPlayer);
				else
					$("#divRosterUnknown").append(thisPlayer);
			});

			var gamePlayers = localStorage.gamePlayers;

			if (gamePlayers != null && gamePlayers != "") {
				var gamePlayersArray = gamePlayers.split(",");

				$(gamePlayersArray).each(function () {
					var playerNumber = this;

					var searchButton = "input[type=button][name=btnPlayer][value=" + playerNumber + "]"
					var btnPlayer = $(searchButton);

					if (btnPlayer.length != 1) {
						alert("Did not find button for player #" + playerNumber);
						return;
					}

					btnPlayer.addClass("OnIce");
				});

				$("#divOnIce").text("On Ice: " + gamePlayersArray.toString());
			}
		}

		function TogglePlayer(btn) {
			var playerNumber = $.trim($(btn).val());

			var gamePlayers = localStorage.gamePlayers;

			var playerList = [];

			if (gamePlayers != null && gamePlayers != "")
				playerList = gamePlayers.split(",");

			var idx = playerList.indexOf(playerNumber);

			if (idx >= 0)
				playerList.splice(idx, 1);
			else
				playerList.push(playerNumber);

			playerList.sort(function (a, b) { return parseInt(a) - parseInt(b); });

			localStorage.gamePlayers = playerList;

			$(btn).toggleClass("OnIce");

			$("#divOnIce").text("On Ice: " + playerList.toString());
		}

		function RecordScoringEvent(plusMinus) {
			var gamePlayers = localStorage.gamePlayers;

			if (gamePlayers == null || gamePlayers === "")
				return;

			var arrayPlayers = gamePlayers.split(",");

			var scoreEvent = new ScoreEvent(plusMinus, arrayPlayers);

			var currentEventsArray = [];

			var currentEvents = localStorage.scoreEvents;

			if (currentEvents != null && currentEvents != "") {
				currentEventsArray = currentEvents.split(",");
			}

			currentEventsArray.push(scoreEvent);

			localStorage.setItem("scoreEvents", currentEventsArray);

			$("#divScoreMessage").text(plusMinus === 1 ? "Yay!" : "Sadness").show();
			$("#divScoreMessage").fadeOut(5000);
		}

	</script>
	<script type="text/javascript">
		// swiping code

		var xDown = null;
		var yDown = null;

		$(document).ready(function () {
			document.addEventListener("touchstart", handleTouchStart, false);
			document.addEventListener("touchmove", handleTouchMove, false);
		});


		function handleTouchStart(evt) {
			xDown = evt.touches[0].clientX;
			yDown = evt.touches[0].clientY;
		}

		function handleTouchMove(evt) {
			if (!xDown || !yDown) {
				return;
			}

			var xUp = evt.touches[0].clientX;
			var yUp = evt.touches[0].clientY;

			var xDiff = xDown - xUp;
			var yDiff = yDown - yUp;

			if (Math.abs(xDiff) > Math.abs(yDiff)) {/*most significant*/
				if (xDiff > 0) {
					SwipeLeft();
				} else {
					SwipeRight();
				}
			} else {
				if (yDiff > 0) {
					/* up swipe */
				} else {
					/* down swipe */
				}
			}
			/* reset values */
			xDown = null;
			yDown = null;
		}

		function SwipeLeft() {
			if ($("#divHockeyLineup:visible").length == 1) {
				NavigateToGame();
			} else if ($("#divHockeyGame:visible").length == 1) {
				NavigateToLineup();
			}
		}

		function SwipeRight() {
			if ($("#divHockeyLineup:visible").length == 1) {
				NavigateToGame();
			} else if ($("#divHockeyGame:visible").length == 1) {
				NavigateToLineup();
			}
		}


	</script>
	<script type="text/javascript">
		// Details

		function BuildDetails() {
			$("#divDetailsContainer").empty();

			var currentEvents = localStorage.scoreEvents;

			console.log("currentEvents: %s", currentEvents);

			var scoringEvents = ScoreEvent.ToList(currentEvents);

			if (scoringEvents.length == 0) {
				$("#divDetailsContainer").text("No Scoring Events");
				return;
			}

			var tblScore = $("<table class='ScoreEvents' />");
			var trHeader = $("<tr/>");

			trHeader.append($("<th/>").text("+/-"));
			trHeader.append($("<th/>").text("Players"));

			tblScore.append(trHeader);

			$(scoringEvents).each(function () {
				scoringEvent = this;

				var tr = $("<tr/>");

				tr.append($("<td/>").text(this.PlusMinus));
				tr.append($("<td/>").text(this.PlayerNumbers.toString()));
				tblScore.append(tr);
			});

			$("#divDetailsContainer").append(tblScore);
		}

	</script>

</head>
<body>
<div id="divPage">
    <div class="Header">
        <table style="width: 100%;">
            <tr>
                <td>
                    <div id="divTitle" class="Title">Lineup</div>
                </td>
                <td style="text-align: right;">
                    <div class="Menu">
                        <a href="javascript: $('#divDropdownMenu').toggle();">[M]</a>
                    </div>
                </td>
            </tr>
        </table>
        <hr />
    </div>
    <div id="divHockeyLineup">
        <div>
            <div class="Body">
                <div class="Content">
                    <div id="divLineup"></div>
                </div>
            </div>
            <div class="Footer">
                <hr />
                <input type="button" id="btnAddPlayer" onclick="AddNewPlayer" value="Add Player" />
            </div>
        </div>
        <div id="divEntry" style="display: none;">
            <div class="PlayerDisplayEntry">
                <div class="PlayerDisplayPrompt">
                    Player #
                </div>
                <div class="PlayerDisplayValue">
                    <input type="text" id="txtPlayerNumber" style="width: 50px;" readonly="readonly" />
                </div>
            </div>
            <div class="PlayerDisplayEntry">
                <div class="PlayerDisplayPrompt">
                    Name
                </div>
                <div class="PlayerDisplayValue">
                    <input type="text" id="txtPlayerName" style="width: 150px;" />
                </div>
            </div>
            <div class="PlayerDisplayEntry">
                <div class="PlayerDisplayPrompt">
                    Position
                </div>
                <div class="PlayerDisplayValue">
                    <div class="PlayerPositionType">
                        <input type="radio" name="PlayerPosition" id="rbOffense" value="O" /><label for="rbOffense">Offense</label>
                    </div>
                    <div class="PlayerPositionType">
                        <input type="radio" name="PlayerPosition" id="rbDefense" value="D" /><label for="rbDefense">Defense</label><br />
                    </div>
                    <div class="PlayerPositionType">
                        <input type="radio" name="PlayerPosition" id="rbUnknown" value="" /><label for="rbUnknown">Both/Unknown</label>
                    </div>
                </div>
            </div>
            <div class="PlayerDisplayEntry">
                <input type="button" id="btnUpdate" value="Update" onclick="UpdatePlayer();" />
                <input type="button" id="btnClose" value="Close" onclick="CloseEntry();" />
                <input type="button" id="btnDelete" value="Delete" onclick="DeleteEntry();" />
            </div>
        </div>
    </div>
    <div id="divHockeyGame" style="display: none;">
        <div>
            <div class="Header">
                <div class="Menu" style="width: 100%;">
                    <table style="width: 100%;">
                        <tr>
                            <td>
                                <input type="button" id="btnScoreGoal" onclick="RecordScoringEvent(1)" value="We Scored" />
                            </td>
                            <td style="text-align: center;">
                                <div id="divScoreMessage"></div>
                            </td>
                            <td style="text-align: right;">
                                <input type="button" id="btnGiveUpGoal" onclick="RecordScoringEvent(-1)" value="They Scored" />
                            </td>
                        </tr>
                    </table>
                </div>
                <hr />
            </div>
            <div class="Body">
                <div class="Content">
                    <div id="divOnIce"></div>
                    <hr />
                    <div id="divRoster">
                        <div id="divRosterOffense" class="PlayerRoster"></div>
                        <div id="divRosterDefense" class="PlayerRoster"></div>
                        <div id="divRosterUnknown" class="PlayerRoster"></div>
                    </div>
                </div>
            </div>
            <div class="Footer">
                <hr />
                <input type="button" id="btnResetGame" onclick="ResetGame();" value="Reset Game" />
            </div>
        </div>
    </div>
    <div id="divDetails" style="display: none;">
        <div>
            <div class="Body">
                <div class="Content">
                    <div id="divDetailsContainer"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="Footer">
        <hr />
        Copyright &copy; 2018 - Viking Information Services, Inc.
    </div>
</div>
<div id="divDropdownMenu" style="display: none;">
    <a href="javascript: NavigateToLineup();">Lineup</a>
    <a href="javascript: NavigateToGame();">Game</a>
    <a href="javascript: NavigateToDetails();">Details</a>
</div>
</body>
</html>