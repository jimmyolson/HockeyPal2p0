<!DOCTYPE HTML>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="x-ua-compatible" content="ie=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="default" />
	<meta name="apple-touch-fullscreen" content="yes" />
	<title>Hockey Pal</title>
	<style type="text/css">
		/* Global Styles */
		body, div, table
		{
		    background-color: transparent;
		    font-size: 0.9rem;
		    font-family: tahoma, verdana, arial;
		    color: navy;
		}
		
		div.Header 
		{
		    margin-bottom: 15px;
		}

		div.Header div.Title
		{
		    font-weight: bold;
		    font-size: 10pt;
		    display: inline-block;
		    margin-right: 25px;
		    color: navy;
		}
		
		div.Header div.Menu
		{
		    display: inline-block;
		}

		div.Header div.Menu a
		{
		    background-color: navy;
		    color: white;
		    display: inline-block;
		    padding: 10px 10px;
		    text-decoration: none;
		    border-radius: 5px;
		    border: solid navy 1px;
		    margin-left: 10px;
		}

		div.Header div.Menu a:hover
		{
		    background-color: white;
		    color: navy;
		}

		div.Body 
		{
		    display: block;
		    width: 100%;
		}
		
		input[type=button] 
		{
		    min-height: 40px;
		}
		
		input[type=text]
		{
		    font-size: 1rem;
		    padding: 10px 15px;
		}
		
	</style>
	<style type="text/css">

		/* Lineup Styles */

		#divEntry 
		{
		    display: block;
		    width: 100%;
		    padding: 10px 15px;
		}
		
		#divLineup 
		{
		    display: block;
		    width: 100%;
		}
		
		#divLineup div.PlayerEntry
		{
		    display: block;
		    padding: 15px 5px;
		    border: solid navy 1px;
		}

		#divLineup div.PlayerEntry:hover
		{
		    background-color: navy;
		    color: white;
		}
		
		div.PlayerDisplayEntry
		{
		    display: block;
		    margin-top: 5px;
		    margin-bottom: 15px;
		}

		div.PlayerDisplayEntry input[type=button]
		{
		    padding-left: 25px;
		    padding-right: 25px;
		    margin-right: 25px;
		}

		div.PlayerDisplayPrompt
		{
		    display: block;
		    font-style: italic;
		}
		
		div.PlayerDisplayValue
		{
		    display: block;
		    margin-left: 10px;
		}
		
	</style>
	<style type="text/css">
		/* Game Styles */

		#divOnIce 
		{
		    display: block;
		    min-height: 40px;
		    font-size: 1.5rem;
		    font-weight: bold;
		}
		
		#divRoster
		{
		    display: block;
		}
		
		#divRoster input[type=button]
		{
		    height: 30px;
		    width: 30px;
		    margin: 5px;
		    border-radius: 5px;
		}

		#divRoster input[type=button].OnIce
		{
		    background-color: yellow;
		    font-weight: bold;
		}
		
		div.PlayerRoster 
		{
		    display: block;
		    border: solid black 1px;
		    margin: 5px;
		    min-height: 25px;
		    border-radius: 5px;
		}
		
	</style>
	<script src="jquery-3.1.1.min.js" type="text/javascript"></script>
	<script type="text/javascript">
		// objects/classes

		function PlayerProfile(playerNumber, playerName, playerPosition) {
			this.PlayerNumber = null;
			this.PlayerName = null;
			this.PlayerPosition = null;

			this.toString = function () {
				return ( this.PlayerNumber || "" ) + "!" + ( this.PlayerName || "" ) + "!" + ( this.PlayerPosition || "" );
			};

			this.initialize = function (playerNumber, playerName, playerPosition) {
				this.PlayerNumber = null;
				this.PlayerName = null;
				this.PlayerPosition = null;

				if (playerNumber == null)
					throw new Error("Cannot initialize PlayerProfile - missing Player Number");

				if (playerName == null || playerName == "")
					throw new Error("Cannot initialize PlayerProfile - missing Player Name");

				if (playerPosition != null) {
					if (playerPosition != "O" && playerPosition != "D" && playerPosition != "")
						throw new Error("Cannot initialize PlayerProfile - invalid Player Position");
				}

				if (isNaN(parseInt(playerNumber)))
					throw new Error("Cannot initialize PlayerProfile - invalid Player Number (not an integer)");

				this.PlayerNumber = parseInt(playerNumber);
				this.PlayerName = playerName;
				this.PlayerPosition = playerPosition;
			};

			this.inflate = function (serializedPlayerProfile) {
				this.PlayerNumber = null;
				this.PlayerName = null;
				this.PlayerPosition = null;

				if (serializedPlayerProfile == null || serializedPlayerProfile == "")
					return;

				var playerProfileParts = serializedPlayerProfile.split("!");

				if (playerProfileParts.length != 3)
					throw new Error("Cannot inflate PlayerProfile - invalid serialized data (did not find 3 parts): " + serializedPlayerProfile);

				this.initialize(playerProfileParts[0], playerProfileParts[1], playerProfileParts[2]);
			}

			this.label = function () {
				return this.PlayerNumber + ": " + this.PlayerName + " (" + this.PlayerPosition + ")";
			}

			this.createPlayerDiv = function () {
				var newDiv = $("<div/>").text(this.label()).addClass("PlayerEntry");

				return newDiv;
			};

			this.inflatFromPlayerDiv = function (div) {
			};

			if (playerNumber != null && playerName != null && playerPosition != null)
				this.initialize(playerNumber, playerName, playerPosition);
			else if (playerNumber != null && playerName == null)
				this.inflate(playerNumber);
		}

	</script>
	<script type="text/javascript">

		$(document).ready(function () {

			BuildLineup();

			$("#txtPlayerNumber").change(function () {
				$(this).val($(this).val().replace(/[^0-9]/g, ""));
			});

			$("#divLineup div").click(function () {
				ShowPlayer($(this));
			});

			RefreshRoster();
		});

		function BuildLineup() {

			InitLineup();

			var keyArray = [];

			for (i = 0; localStorage.key(i) != null; i++) {

				if (localStorage.key(i).substr(0, 6) != "player")
					continue;

				var serializedPlayerProfile = localStorage.getItem(localStorage.key(i));
				var playerProfile = new PlayerProfile(serializedPlayerProfile);

				keyArray.push(parseInt(playerProfile.PlayerNumber));
			}

			keyArray.sort(function (a, b) { return a - b; });

			$(keyArray).each(function () {
				var playerNumber = this;
				var infoKey = "player" + playerNumber;
				var serializedPlayer = localStorage.getItem(infoKey);


				var playerProfile = new PlayerProfile(serializedPlayer);
				var objPlayerInfo = playerProfile.createPlayerDiv();

				$("#divLineup").append(objPlayerInfo);
			});
		}

		function InitLineup() {
			var playerNumberList = localStorage.getItem("NumberList");

			if (playerNumberList != null)
				return;

			localStorage.setItem("NumberList", "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,40,41,42,43,44,45,46,47,48,49");

			var playerNumbers = localStorage.NumberList.split(",");

			$(playerNumbers).each(function () {
				var playerNumber = this;
				var infoKey = "player" + playerNumber;

				var playerInfo = localStorage.getItem(infoKey);

				if (playerInfo == null) {
					var playerName = "Player" + playerNumber;

					var playerProfile = new PlayerProfile(playerNumber, playerName, "");

					localStorage.setItem(infoKey, playerProfile.toString());
				}
			});
		}

		function ShowPlayer(divPlayer) {
			var playerInfo = $.trim(divPlayer.text());
			var playerNumber = $.trim(playerInfo.split(":")[0]);

			var infoKey = "player" + playerNumber;

			var serializedPlayer = localStorage.getItem(infoKey);

			if (serializedPlayer == null || serializedPlayer == "") {
				alert("playerInfo not found");
				return;
			}

			if ($("#divEntry").is(":visible") && playerNumber == $("#txtPlayerNumber").val()) {
				$("#divEntry").hide();
				return;
			}

			$("#divEntry").hide();

			var playerProfile = new PlayerProfile(serializedPlayer);

			$("#txtPlayerNumber").val(playerProfile.PlayerNumber);
			$("#txtPlayerName").val(playerProfile.PlayerName);

			$("#rbUnknown").prop("checked", true);

			if (playerProfile.PlayerPosition == "O")
				$("#rbOffense").prop("checked", true);
			else if (playerProfile.PlayerPosition == "D")
				$("#rbDefense").prop("checked", true);

			$("#divEntry").insertAfter(divPlayer);
			$("#txtPlayerNumber").prop("readonly", true);
			$("#divEntry").show();
			$("#txtPlayerName").focus();
		}

		function UpdatePlayer() {
			var playerName = $.trim($("#txtPlayerName").val());

			if (playerName === "") {
				alert("Player Name must have a value");
				return;
			}

			var playerNumber = $("#txtPlayerNumber").val();
			var nPlayerNumber = parseInt(playerNumber);
			var playerPosition = $("#rbOffense").prop("checked")
						? "O"
						: (
							$("#rbDefense").prop("checked")
								? "D"
								: ""
						);

			var infoKey = "player" + playerNumber;

			var playerProfile = new PlayerProfile(nPlayerNumber, playerName, playerPosition);

			localStorage.setItem(infoKey, playerProfile.toString());

			var divs = $("div.PlayerEntry")
				.filter(function () {
					return parseInt($.trim($(this).text()).split(":")[0]) >= nPlayerNumber;
				});

			if (divs.length === 0) {
				var objPlayerInfo = playerProfile.createPlayerDiv();
				$("#divLineup").append(objPlayerInfo);

				objPlayerInfo.click(function () {
					ShowPlayer($(this));
				});

				return;
			}

			var div = $(divs[0]);

			if ($.trim(div.text()).split(":")[0] === playerNumber) {
				div.text(playerProfile.label());
				return;
			}

			var newDiv = playerProfile.createPlayerDiv();

			newDiv.click(function () {
				ShowPlayer($(this));
			});

			newDiv.insertBefore(div);
		}

		function CloseEntry() {
			$("#divEntry").hide();
		}

		function AddNewPlayer() {
			$("#divEntry").hide();
			$("#divEntry").insertBefore("#divLineup");
			$("#txtPlayerNumber").prop("readonly", false).focus().val("");
			$("#txtPlayerName").val("");
			$("#rbUnknown").prop("checked", true);
			$("#divEntry").show();
		}

		function DeleteEntry() {
			var playerNumber = $("#txtPlayerNumber").val();
			var nPlayerNumber = parseInt(playerNumber);
			var infoKey = "player" + playerNumber;

			var gamePlayers = localStorage.gamePlayers;

			if (gamePlayers != null && gamePlayers != "") {
				var gamePlayersArray = gamePlayers.split(",");

				if (gamePlayers.indexOf(playerNumber) >= 0) {
					alert("Player cannot be deleted - currently 'On the Ice'");
					return;
				}
			}


			localStorage.removeItem(infoKey);

			var div = $("div.PlayerEntry")
				.filter(function () {
					return parseInt($.trim($(this).text()).split(":")[0]) === nPlayerNumber;
				});

			if (div.length === 1) {
				div.remove();
			}

			$("#divEntry").hide();
		}

	</script>
	<script type="text/javascript">
		// intra-screen navigation

		function NavigateToGame() {
			RefreshRoster();
			$("#divHockeyLineup").slideToggle(500);
			$("#divHockeyGame").slideToggle(500);
		}

		function NavigateToLineup() {
			$("#divHockeyGame").slideToggle(500);
			$("#divHockeyLineup").slideToggle(500);
		}

	</script>
	<script type="text/javascript">

		function ResetGame() {

			if (!confirm("Reset game - will lose all game-time history?"))
				return;

			localStorage.removeItem("gamePlayers");

			RefreshRoster();
		}


		function RefreshRoster() {
			$("#divRosterOffense").empty();
			$("#divRosterDefense").empty();
			$("#divRosterUnknown").empty();
			$("#divOnIce").empty();

			var keyArray = [];

			for (i = 0; localStorage.key(i) != null; i++) {

				if (localStorage.key(i).substr(0, 6) != "player")
					continue;

				var serializedPlayer = localStorage.getItem(localStorage.key(i));
				var playerProfile = new PlayerProfile(serializedPlayer);

				keyArray.push(parseInt(playerProfile.PlayerNumber));
			}

			keyArray.sort(function (a, b) { return a - b; });

			$(keyArray).each(function () {
				var infoKey = "player" + this;
				var serializedPlayer = localStorage.getItem(infoKey);
				var playerProfile = new PlayerProfile(serializedPlayer);
				var thisPlayer = $("<input type='button' name='btnPlayer' onclick='TogglePlayer(this);'/>").val(playerProfile.PlayerNumber);

				if (playerProfile.PlayerPosition == "O")
					$("#divRosterOffense").append(thisPlayer);
				else if (playerProfile.PlayerPosition == "D")
					$("#divRosterDefense").append(thisPlayer);
				else
					$("#divRosterUnknown").append(thisPlayer);
			});

			var gamePlayers = localStorage.gamePlayers;

			if (gamePlayers != null && gamePlayers != "") {
				var gamePlayersArray = gamePlayers.split(",");

				$(gamePlayersArray).each(function () {
					var playerNumber = this;

					var searchButton = "input[type=button][name=btnPlayer][value=" + playerNumber + "]"
					var btnPlayer = $(searchButton);

					if (btnPlayer.length != 1) {
						alert("Did not find button for player #" + playerNumber);
						return;
					}

					btnPlayer.addClass("OnIce");
				});

				$("#divOnIce").text("On Ice: " + gamePlayersArray.toString());
			}
		}

		function TogglePlayer(btn) {
			var playerNumber = $.trim($(btn).val());

			var gamePlayers = localStorage.gamePlayers;

			var playerList = [];

			if (gamePlayers != null && gamePlayers != "")
				playerList = gamePlayers.split(",");

			var idx = playerList.indexOf(playerNumber);

			if (idx >= 0)
				playerList.splice(idx, 1);
			else
				playerList.push(playerNumber);

			playerList.sort(function (a, b) { return parseInt(a) - parseInt(b); });

			localStorage.gamePlayers = playerList;

			$(btn).toggleClass("OnIce");

			$("#divOnIce").text("On Ice: " + playerList.toString());
		}

		function ScoreEvent(plusMinus, arrayPlayerNumbers) {
			this.PlusMinus = plusMinus;
			this.PlayerNumbers = arrayPlayerNumbers;

			this.toString = function () {
				return this.PlusMinus.toString() + "!" + this.PlayerNumbers.toString().replace(/,/g, ";");
			}

			this.inflate = function (serializedScoreEvent) {
				this.PlusMinus = 0;
				this.PlayerNumbers = [];

				var eventParts = serializedScoreEvent.split("!");

				if (eventParts.length != 2) {
					alert("Failed to deserialize a ScoreEvent");
					return;
				}

				var plusMinus = parseInt(eventParts[0]);

				if (isNaN(plusMinus) || (plusMinus != -1 && plusMinus != 1)) {
					alert("Failed to deserialize a ScoreEvent - Invalid Plus/Minus");
					return;
				}

				if ($.trim(eventParts[1]) === "") {
					alert("Failed to deserialize a ScoreEvent - Empty Players List");
					return;
				}

				var playerArray = eventParts[1].split(";");

				this.PlusMinus = plusMinus;
				this.PlayerNumbers = playerArray;

				return this;
			}
		}

		ScoreEvent.ToList = function (scoreEventsString) {
			var eventsArray = scoreEventsString.split(",");

			var finalList = [];

			$(eventsArray).each(function () {
				var scoreEvent = new ScoreEvent().inflate(this);

				finalList.push(scoreEvent);
			});

			return finalList;
		}

		function RecordScoringEvent(plusMinus) {
			var arrayPlayers = [];

			$("#ulOnIce li").each(function () {
				var playerNumber = $.trim($(this).text().split(":")[0]);

				arrayPlayers.push(playerNumber);
			});

			var scoreEvent = new ScoreEvent(plusMinus, arrayPlayers);

			var currentEventsArray = [];

			var currentEvents = localStorage.scoreEvents;

			if (currentEvents != null && currentEvents != "") {
				currentEventsArray = currentEvents.split(",");
			}

			currentEventsArray.push(scoreEvent);

			localStorage.setItem("scoreEvents", currentEventsArray);
		}


	</script>
</head>
<body>
	<div id="divHockeyLineup">
		<div>
			<div class="Header">
				<div class="Title">Hockey Lineup</div>
				<div class="Menu">
					<a href="javascript: NavigateToGame();">Game</a>
					<a href="javascript: AddNewPlayer()">Add Player</a>
				</div>
				<hr />
			</div>
			<div class="Body">
				<div class="Content">
					<div id="divLineup"></div>
				</div>
			</div>
			<div class="Footer">
				<hr />
				Copyright &copy; 2018 - Viking Information Services, Inc.
			</div>
		</div>
		<div id="divEntry" style="display: none;">
			<div class="PlayerDisplayEntry">
				<div class="PlayerDisplayPrompt">
					Player #
				</div>
				<div class="PlayerDisplayValue">
					<input type="text" id="txtPlayerNumber" style="width: 50px;" readonly="readonly" />
				</div>
			</div>
			<div class="PlayerDisplayEntry">
				<div class="PlayerDisplayPrompt">
					Name
				</div>
				<div class="PlayerDisplayValue">
					<input type="text" id="txtPlayerName" style="width: 150px;" />
				</div>
			</div>
			<div class="PlayerDisplayEntry">
				<div class="PlayerDisplayPrompt">
					Position
				</div>
				<div class="PlayerDisplayValue">
					<input type="radio" name="PlayerPosition" id="rbOffense" value="O" /><label for="rbOffense">Offense</label><br />
					<input type="radio" name="PlayerPosition" id="rbDefense" value="D" /><label for="rbOffense">Defense</label><br />
					<input type="radio" name="PlayerPosition" id="rbUnknown" value="" /><label for="rbOffense">Both/Unknown</label>
				</div>
			</div>
			<div class="PlayerDisplayEntry">
				<input type="button" id="btnUpdate" value="Update" onclick="UpdatePlayer();" />
				<input type="button" id="btnClose" value="Close" onclick="CloseEntry();" />
				<input type="button" id="btnDelete" value="Delete" onclick="DeleteEntry();" />
			</div>
		</div>
	</div>
	<div id="divHockeyGame" style="display: none;">
		<div>
			<div class="Header">
				<div class="Title">
					Hockey Game</div>
				<div class="Menu">
					<a href="javascript: NavigateToLineup();">Lineup</a>
				</div>
				<hr />
				<div class="Menu" style="width: 100%;">
					<table style="width: 100%;">
						<tr>
							<td>
								<input type="button" id="btnScoreGoal" onclick="RecordScoringEvent(1)" value="We Scored" />
							</td>
							<td style="text-align: right;">
								<input type="button" id="btnGiveUpGoal" onclick="RecordScoringEvent(-1)" value="They Scored" />
							</td>
						</tr>
					</table>
				</div>
				<hr />
			</div>
			<div class="Body">
				<div class="Content">
					<div id="divOnIce"></div>
					<hr />
					<div id="divRoster">
						<div id="divRosterOffense" class="PlayerRoster"></div>
						<div id="divRosterDefense" class="PlayerRoster"></div>
						<div id="divRosterUnknown" class="PlayerRoster"></div>
					</div>
				</div>
			</div>
			<div class="Footer">
				<hr />
				<input type="button" id="btnResetGame" onclick="ResetGame();" value="Reset Game" />
				<hr />
				Copyright &copy; 2018 - Viking Information Services, Inc.
			</div>
		</div>
	</div>
</body>
</html>